# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class WobliczuArticle(models.Model):
    id = models.AutoField(db_column='ID', primary_key=True)  # Field name made lowercase.
    title = models.CharField(max_length=100)
    short_desc = models.CharField(max_length=650)
    content = models.TextField()
    miniature = models.CharField(max_length=100)
    main_image = models.CharField(max_length=100)
    user = models.ForeignKey('WobliczuArticleuser', models.DO_NOTHING, blank=True, null=True)
    views = models.IntegerField()
    pub_date = models.DateTimeField()
    image_section_four = models.CharField(max_length=100, blank=True, null=True)
    image_section_three = models.CharField(max_length=100, blank=True, null=True)
    image_section_two = models.CharField(max_length=100, blank=True, null=True)
    text_section_four = models.CharField(max_length=10000, blank=True, null=True)
    text_section_three = models.CharField(max_length=10000, blank=True, null=True)
    text_section_two = models.CharField(max_length=10000, blank=True, null=True)
    slug = models.CharField(unique=True, max_length=200, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Wobliczu_article'


class WobliczuArticleMainTags(models.Model):
    article = models.ForeignKey(WobliczuArticle, models.DO_NOTHING)
    maintags = models.ForeignKey('WobliczuMaintags', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'Wobliczu_article_main_tags'
        unique_together = (('article', 'maintags'),)


class WobliczuArticleSecondaryTags(models.Model):
    article = models.ForeignKey(WobliczuArticle, models.DO_NOTHING)
    secondarytags = models.ForeignKey('WobliczuSecondarytags', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'Wobliczu_article_secondary_tags'
        unique_together = (('article', 'secondarytags'),)


class WobliczuArticleimages(models.Model):
    image = models.CharField(max_length=100)
    article = models.ForeignKey(WobliczuArticle, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'Wobliczu_articleimages'


class WobliczuArticleuser(models.Model):
    numberofarticles = models.IntegerField(db_column='numberOfArticles')  # Field name made lowercase.
    user = models.OneToOneField('AuthUser', models.DO_NOTHING)
    total_views = models.IntegerField()
    last_pub_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'Wobliczu_articleuser'


class WobliczuComment(models.Model):
    username = models.CharField(max_length=35, blank=True, null=True)
    pub_date = models.DateTimeField()
    content = models.CharField(max_length=999, blank=True, null=True)
    article = models.ForeignKey(WobliczuArticle, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'Wobliczu_comment'


class WobliczuMaintags(models.Model):
    main_tag = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'Wobliczu_maintags'


class WobliczuSecondarytags(models.Model):
    secondary_tag = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'Wobliczu_secondarytags'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=30)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    last_name = models.CharField(max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class CaptchaCaptchastore(models.Model):
    challenge = models.CharField(max_length=32)
    response = models.CharField(max_length=32)
    hashkey = models.CharField(unique=True, max_length=40)
    expiration = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'captcha_captchastore'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    action_flag = models.PositiveSmallIntegerField()

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'
